public class Test {
	static boolean debug = true;
	static int counter = 0;
	static AWSCBound bound;
	static Lane lane;

	public static void print(String x) {
		print(x, false);
	}

	public static void print(String x, boolean singleLine) {
		if (isTrue())
			if (singleLine)
				System.out.print(x);
			else
				System.out.println(x);
	}

	public static void printArr(double[] x) {
		if (isTrue()) {
			for (double d : x) {
				System.out.print(d + " ");
			}
			System.out.println();
		}

	}

	private static boolean isTrue() {
		return debug;// && bound instanceof NorthAWSCBound;// && lane instanceof
						// AWSCLane;
	}

	public static void debugF() {
		if (isTrue()) {
			@SuppressWarnings("unused")
			int x = 1;
			x++;
		}
	}
	// public static void main(String[] args) {
	// extracted();
	// }

	public static void extracted() {
		String x = "1,0\n" + "000000000\n" + "2,1\n" + "100000000\n" + "010000000\n" + "001000000\n" + "2,2\n"
				+ "110000000\n" + "011000000\n" + "101000000\n" + "2,3\n" + "111000000\n" + "3,1\n" + "000100000\n"
				+ "000010000\n" + "000001000\n" + "000000100\n" + "000000010\n" + "000000001\n" + "3,2\n"
				+ "000110000\n" + "000011000\n" + "000101000\n" + "000000110\n" + "000000011\n" + "000000101\n"
				+ "3,3\n" + "000111000\n" + "000000111\n" + "4,2\n" + "100100000\n" + "100010000\n" + "100001000\n"
				+ "010100000\n" + "010010000\n" + "010001000\n" + "001100000\n" + "001010000\n" + "001001000\n"
				+ "100000100\n" + "100000010\n" + "100000001\n" + "010000100\n" + "010000010\n" + "010000001\n"
				+ "001000100\n" + "001000010\n" + "001000001\n" + "000100100\n" + "000100010\n" + "000100001\n"
				+ "000010100\n" + "000010010\n" + "000010001\n" + "000001100\n" + "000001010\n" + "000001001\n"
				+ "4,3\n" + "110100000\n" + "110010000\n" + "110001000\n" + "011100000\n" + "011010000\n"
				+ "011001000\n" + "101100000\n" + "101010000\n" + "101001000\n" + "110000100\n" + "110000010\n"
				+ "110000001\n" + "011000100\n" + "011000010\n" + "011000001\n" + "101000100\n" + "101000010\n"
				+ "101000001\n" + "100110000\n" + "100011000\n" + "100101000\n" + "010110000\n" + "010011000\n"
				+ "010101000\n" + "001110000\n" + "001011000\n" + "001101000\n" + "000110100\n" + "000110010\n"
				+ "000110001\n" + "000011100\n" + "000011010\n" + "000011001\n" + "000101100\n" + "000101010\n"
				+ "000101001\n" + "100000110\n" + "100000011\n" + "100000101\n" + "010000110\n" + "010000011\n"
				+ "010000101\n" + "001000110\n" + "001000011\n" + "001000101\n" + "000100110\n" + "000100011\n"
				+ "000100101\n" + "000010110\n" + "000010011\n" + "000010101\n" + "000001110\n" + "000001011\n"
				+ "000001101\n" + "4,4\n" + "110110000\n" + "110011000\n" + "110101000\n" + "011110000\n"
				+ "011011000\n" + "011101000\n" + "101110000\n" + "101011000\n" + "101101000\n" + "110000110\n"
				+ "110000011\n" + "110000101\n" + "011000110\n" + "011000011\n" + "011000101\n" + "101000110\n"
				+ "101000011\n" + "101000101\n" + "000110110\n" + "000110011\n" + "000110101\n" + "000011110\n"
				+ "000011011\n" + "000011101\n" + "000101110\n" + "000101011\n" + "000101101\n" + "111100000\n"
				+ "111010000\n" + "111001000\n" + "111000100\n" + "111000010\n" + "111000001\n" + "100111000 #137\n"
				+ "010111000\n" + "001111000 #139\n" + "000111100 #140\n" + "000111010 #141\n" + "000111001\n"
				+ "100000111 \n" + "010000111 \n" + "001000111\n" + "000010111\n" + "000100111\n" + "000001111 #148\n"
				+ "4,5\n" + "111110000 #149\n" + "111011000\n" + "111101000\n" + "111000110\n" + "111000011\n"
				+ "111000101\n" + "110111000\n" + "011111000\n" + "000111110\n" + "000111011\n" + "000111101\n"
				+ "101111000\n" + "110000111\n" + "011000111\n" + "101000111\n" + "000110111\n" + "000011111\n"
				+ "000101111 #166\n" + "4,6\n" + "111111000\n" + "111000111\n" + "000111111\n" + "5,3\n"
				+ "100100100 #170\n" + "100100010\n" + "100100001\n" + "100010100\n" + "100010010\n"
				+ "100010001 #175\n" + "100001100\n" + "100001010\n" + "100001001\n" + "010100100\n" + "010100010\n"
				+ "010100001\n" + "010010100\n" + "010010010\n" + "010010001\n" + "010001100\n" + "010001010\n"
				+ "010001001\n" + "001100100\n" + "001100010\n" + "001100001\n" + "001010100\n" + "001010010\n"
				+ "001010001\n" + "001001100\n" + "001001010\n" + "001001001 #196\n" + "5,4\n" + "110100100 #197\n"
				+ "110100010\n" + "110100001\n" + "110010100\n" + "110010010\n" + "110010001\n" + "110001100\n"
				+ "110001010\n" + "110001001\n" + "011100100\n" + "011100010\n" + "011100001\n" + "011010100\n"
				+ "011010010\n" + "011010001\n" + "011001100\n" + "011001010\n" + "011001001\n" + "101100100\n"
				+ "101100010\n" + "101100001\n" + "101010100\n" + "101010010\n" + "101010001\n" + "101001100\n"
				+ "101001010\n" + "101001001\n" + "100110100\n" + "100110010\n" + "100110001\n" + "100011100\n"
				+ "100011010\n" + "100011001\n" + "100101100\n" + "100101010\n" + "100101001\n" + "010110100\n"
				+ "010110010\n" + "010110001\n" + "010011100\n" + "010011010\n" + "010011001 #238\n"
				+ "010101100 #239\n" + "010101010\n" + "010101001\n" + "001110100\n" + "001110010\n" + "001110001\n"
				+ "001011100\n" + "001011010\n" + "001011001\n" + "001101100\n" + "001101010\n" + "001101001\n"
				+ "100100110\n" + "100100011\n" + "100100101\n" + "100010110\n" + "100010011\n" + "100010101\n"
				+ "100001110\n" + "100001011\n" + "100001101\n" + "010100110\n" + "010100011 #261\n"
				+ "010010110 #262\n" + "010100101\n" + "010010101 \n" + "010001110 \n" + "010001011 \n" + "010001101 \n"
				+ "010010011\n" + "001100110\n" + "001100011 \n" + "001100101\n" + "001010110\n" + "001010011\n"
				+ "001010101\n" + "001001110 \n" + "001001011 \n" + "001001101 #277\n" + "5,5\n" + "110110100 #278\n"
				+ "110110010\n" + "110110001\n" + "110011100\n" + "110011010 #282\n" + "110011001 #283\n"
				+ "110101100 #284\n" + "110101010\n" + "110101001\n" + "011110010\n" + "011110001\n" + "011011100\n"
				+ "011011010\n" + "011011001\n" + "011101100\n" + "011101010\n" + "011101001\n" + "101110100\n"
				+ "101110010\n" + "101110001\n" + "101011100\n" + "011110100\n" + "101011010 #300\n"
				+ "101011001 #301\n" + "101101100 #302\n" + "101101010\n" + "101101001\n" + "110100110\n"
				+ "110010110\n" + "110001110\n" + "110100011\n" + "110010011\n" + "110001011\n" + "110100101\n"
				+ "110010101\n" + "110001101\n" + "011100110\n" + "011010110\n" + "011001110\n" + "011100011\n"
				+ "011010011\n" + "011001011\n" + "011100101\n" + "011010101 #321\n" + "011001101 #322\n"
				+ "101100110\n" + "101010110\n" + "101100011\n" + "101001110\n" + "101001011\n" + "101100101\n"
				+ "101010101\n" + "101001101\n" + "100110110\n" + "100110011\n" + "100110101\n" + "101010011\n"
				+ "100011011\n" + "100011110\n" + "100101110\n" + "100101011\n" + "100101101\n" + "010110110\n"
				+ "010110011\n" + "010110101\n" + "010011110\n" + "010011011\n" + "100011101\n" + "010101110\n"
				+ "010101011\n" + "010011101\n" + "010101101\n" + "001110110\n" + "001110011\n" + "001110101\n"
				+ "001011110\n" + "001011011\n" + "001011101\n" + "001101110\n" + "001101011\n" + "001101101\n"
				+ "111100100\n" + "111100010\n" + "111100001\n" + "111010100\n" + "111010010\n" + "111010001 #364\n"
				+ "111001100 #365\n" + "111001010\n" + "111001001\n" + "100111100\n" + "100111010\n" + "100111001\n"
				+ "010111100\n" + "010111010\n" + "010111001\n" + "001111100\n" + "001111010\n" + "001111001\n"
				+ "100100111\n" + "100010111\n" + "100001111\n" + "010100111\n" + "010010111\n" + "010001111\n"
				+ "001100111\n" + "001010111\n" + "001001111 #385\n" + "5,6\n" + "110110011 #386\n" + "110110110\n"
				+ "110011110\n" + "110110101\n" + "110011101 \n" + "110101110 \n" + "110101011 \n" + "110101101\n"
				+ "110011011\n" + "011110011 \n" + "011110101 \n" + "011011110 \n" + "011011011\n" + "011011101\n"
				+ "011101110\n" + "011101011\n" + "011101101\n" + "101110110\n" + "101110011\n" + "101110101\n"
				+ "101011110\n" + "101011011\n" + "011110110\n" + "101101110 \n" + "101101011 \n" + "101101101\n"
				+ "101011101\n" + "111110010 \n" + "111110001 \n" + "111011100 \n" + "111011010 \n" + "111011001 \n"
				+ "111101100\n" + "111101010 \n" + "111101001 \n" + "111100110 \n" + "111100011 \n" + "111100101 \n"
				+ "111010110\n" + "111110100\n" + "111010011\n" + "111010101 #427\n" + "111001110\n" + "111001011\n"
				+ "111001101\n" + "110111100\n" + "110111010\n" + "110111001\n" + "011111100\n" + "011111010\n"
				+ "011111001\n" + "101111100\n" + "101111010\n" + "101111001\n" + "100111110\n" + "100111011\n"
				+ "100111101\n" + "010111110\n" + "010111011\n" + "010111101\n" + "001111110\n" + "001111011\n"
				+ "001111101\n" + "110100111\n" + "110010111\n" + "110001111\n" + "011100111\n" + "011010111\n"
				+ "011001111\n" + "101100111\n" + "101010111\n" + "101001111\n" + "100110111\n" + "100011111\n"
				+ "100101111\n" + "010110111\n" + "010011111\n" + "010101111\n" + "001110111\n" + "001011111\n"
				+ "001101111 #466\n" + "5,7\n" + "111110110\n" + "111110011\n" + "111110101\n" + "111011110\n"
				+ "111011011\n" + "111011101\n" + "111101110\n" + "111101011\n" + "111101101\n" + "110111110\n"
				+ "110111011\n" + "110111101\n" + "011111110\n" + "011111011\n" + "011111101\n" + "101111110\n"
				+ "101111011\n" + "101111101\n" + "110110111\n" + "110011111\n" + "110101111\n" + "011110111\n"
				+ "011011111\n" + "011101111\n" + "101110111\n" + "101011111\n" + "101101111\n" + "111111100\n"
				+ "111111010\n" + "111111001\n" + "111100111\n" + "111010111\n" + "111001111\n" + "100111111\n"
				+ "010111111\n" + "001111111 #502\n" + "5,8\n" + "111111110\n" + "111111011\n" + "111111101\n"
				+ "111110111\n" + "111011111\n" + "111101111\n" + "110111111\n" + "011111111\n" + "101111111\n"
				+ "5,9\n" + "111111111";

		String[] strings = x.split("\n");
		int doc = 0, vehicles = 0;
		int index = 0;
		StringBuilder builder = new StringBuilder();
		double[][] d = new double[512][11];
		builder.append('{');
		for (int i = 0; i < strings.length; i++) {
			String s = strings[i];
			if (s.contains(",")) {
				String[] docVeh = s.split(",");
				doc = Integer.parseInt(docVeh[0]);
				vehicles = Integer.parseInt(docVeh[1]);
			} else if (s.length() > 8) {
				d[index][0] = doc;
				builder.append("{" + doc + ",");
				d[index][1] = vehicles;
				builder.append(vehicles + ",");
				for (int l = 0; l < 9; l++) {
					d[index][l + 2] = s.charAt(l) - '0';
					if (d[index][l + 1] == -16) {
						System.out.println();
					}
					builder.append(d[index][l + 2] + ",");
				}
				builder.append("0,},");
				index++;
			}
		}
		builder.append('}');

		System.out.println(builder.toString());
	}
}
